<!DOCTYPE html>
<html lang="en">

<head>
    <title>Muvin</title>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="/muvin/lib/d3.min.js"></script>

    <link rel="stylesheet" href="/muvin/demo.css">
    <script src="/muvin/demo.js"></script>

    <script type="module" src="/muvin/vis-muvin.js"></script>
</head>

<body>
    <div class="menu">
    
        <h3>Muvin</h3>
    
        <div id='menu-items' class='settings' >
            <div id="search-for" class='section'>
                <label>Search for</label>
                <datalist id='nodes-list'></datalist>
                <input type="text" list='nodes-list' id="nodes-input" placeholder="Type here...">
                <button id="search-go">Go</button>
            </div>
    
            <div>
                <button id="clear-cache">Clear Cache</button>
            </div>
        </div>
    </div>

    <div id="visualization" >
        <vis-muvin height="100%" width="100%" id="muvin" app=<%= locals.app %> ></vis-muvin>
    </div>

    <div class='welcome-text'></div>

    <script>

        let locals = <%- JSON.stringify(locals) %>;
        console.log(locals)

        //const navigationBar = new Demo()
        //navigationBar.init()

        document.addEventListener('DOMContentLoaded', () => {
            // incrementalHalApp();
            // nonIncrementalHalApp();
            // divaTestApp()
            divaTestApp2()
        });

        async function divaTestApp2() {
            let encoding = {
                "nodes": {
                    "field": "user",
                    "label": "User"
                },
                "links": {
                    "field": "entityType",
                    "title": { "field": "entityType" },
                    "label": "Entity"
                },
                "temporal": {
                    "field": "step",
                    "label": "Step"
                },
                "color": {
                    "field": "actionType",
                    "type": "nominal",
                    "label": "Action Type",
                    "scale": {
                        "domain": null,
                        "range": null
                    },
                    "legend": {
                        "display": true
                    }
                },
                "size": {
                    "field": "user",
                    "type": "quantitative",
                    "scale": {
                        "range": [10, 100],
                        "type": "linear"
                    },
                    "legend": {
                        "display": true,
                        "title": "Number of Related Entities"
                    }
                }    
            }

            document.getElementById('visualization').style.display = 'block';

            let data = await fetch('/muvin/prov-data/query2-test.json').then(response => response.json());
            console.log('SPARQL results:', data);

            const muvin = document.querySelector('vis-muvin');
            muvin.sparqlResults = data;
            muvin.encoding = encoding;
                
            let nodes = data.results.bindings.map(d => d.user?.value).filter(Boolean)
            nodes = [...new Set(nodes)];
            console.log('Unique nodes:', nodes);

            muvin.launch(nodes);

        }


        async function divaTestApp() {
            let encoding = {
                "nodes": {
                    "field": [ "ego", "alter" ],
                },
                "links": {
                    "field": "uri",
                    "browse": { "field": "link" },
                    "title": { "field": "title" },
                },
                "temporal": {
                    "field": "date"
                },
                "color": {
                    "field": "type",
                    "type": "nominal",
                    "scale": {
                        "domain": ["Click", "Transform Interaction", "Create Visualization", "Delete"],
                        "range": ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"],
                    },
                    "legend": {
                        "display": true, // default : true
                        "title": "Interaction Type", // default : Link Type
                    }
                },
                "size": {
                    "field": "alter",
                    "type": "quantitative",
                    "scale": {
                        "range": [10, 100],
                        "type": "linear"
                    },
                    "legend": {
                        "display": true,
                        "title": "Number of Related Entities",
                    }
                }    
            }

            document.getElementById('visualization').style.display = 'block';

            let data = await fetch('/muvin/prov-data/query_muvin1.json').then(response => response.json());
            console.log('SPARQL results:', data);

            const muvin = document.querySelector('vis-muvin');
            muvin.sparqlResults = data;
            muvin.encoding = encoding;
                
            let nodes = data.results.bindings.map(d => d.ego?.value).filter(Boolean)
            nodes = [...new Set(nodes)];
            console.log('Unique nodes:', nodes);

            muvin.launch(nodes);

        }

        async function nonIncrementalHalApp() {
            document.getElementById('visualization').style.display = 'block';

            let encoding = {
                "nodes": {
                    "field": ["ego", "alter"]
                },
                "links": {
                    "field": "myLink",
                    "browse": { "field": "link" },
                    "title": { "field": "title" },
                },
                "temporal": {
                    "field": "year"
                },
                "color": {
                    "field": "type",
                    "type": "nominal",
                    "scale": {
                        "domain": null, // filled later
                        "range": null, // filled later
                    },
                    "legend": {
                        "display": true, // default : true
                        "title": "Publication Type", // default : Link Type
                    }
                },
                "size": {
                    "field": "alter",
                    "type": "quantitative",
                    "scale": {
                        "range": [10, 100],
                        "type": "linear"
                    },
                    "legend": {
                        "display": true,
                        "title": "Number of Co-authors",
                    }
                }    
            }

            let query = locals.query.replace("$node", "Aline Menin")
            console.log("query = ", query)
            const url = `${locals.proxy}?endpoint=${locals.endpoint}&query=${encodeURIComponent(locals.query)}`;

            let data = await fetch(url).then(response => response.json())

            console.log('SPARQL results:', data);
            const muvin = document.querySelector('vis-muvin');
            muvin.sparqlResults = data;
            muvin.app = locals.app;

            let types = data.results.bindings.map(d => d.type.value)
            types = [...new Set(types)];
            console.log('Unique types:', types);
            encoding.color.scale.domain = types;
            encoding.color.scale.range = d3.schemeCategory10.slice(0, types.length);

            muvin.encoding = encoding;

            let nodes = data.results.bindings.map(d => d.ego.value)
            nodes = [...new Set(nodes)];
            console.log('Unique nodes:', nodes);

            muvin.launch(nodes);
        }

        async function incrementalHalApp() {
            document.getElementById('visualization').style.display = 'block';

            let encoding = {
                "nodes": {
                    "field": ["ego", "alter"]
                },
                "links": {
                    "field": "uri",
                    "browse": { "field": "link" },
                    "title": { "field": "title" },
                },
                "temporal": {
                    "field": "year"
                },
                "color": {
                    "field": "type",
                    "type": "nominal",
                    "scale": {
                        "domain": null, // filled later
                        "range": null, // filled later
                    },
                    "legend": {
                        "display": true, // default : true
                        "title": "Publication Type", // default : Link Type
                    }
                },
                "size": {
                    "field": "alter",
                    "type": "quantitative",
                    "scale": {
                        "range": [10, 100],
                        "type": "linear"
                    },
                    "legend": {
                        "display": true,
                        "title": "Number of Co-authors",
                    }
                }    
            }
    
            const muvin = document.querySelector('vis-muvin');
         
            muvin.app = locals.app;
            muvin.sparqlQuery = locals.query;
            muvin.sparqlEndpoint = locals.endpoint;
            muvin.sparqlProxy = locals.proxy;
            muvin.encoding = encoding;

            muvin.launch("Aline Menin"); // or a list with the node as only element
        }
        


        async function fetchData() {
            document.getElementById('visualization').style.display = 'block';

            let nodes = ['Aline Menin', 'Marco Winckler']
            for (let node of nodes) {
                let query = locals.query.replace("$node", node)
                const url = `${locals.proxy}?endpoint=${locals.endpoint}&query=${encodeURIComponent(query)}`;

                let data = await fetch(url).then(response => response.json())

                console.log('SPARQL results:', data);
                const muvin = document.querySelector('vis-muvin');
                muvin.sparqlResults = data;
                muvin.app = locals.app;
                muvin.launch([node]);
                
            }
        }
        

    </script>
</body>